generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EvidenceType {
  ENTRANCE
  EXIT
  OBSERVATION
  OBSERVATION1
  OBSERVATION2
}

enum Status {
  PENDENTE
  ASSUMIDO
  CONCLUIDO
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum StatusAvaliacao {
  RUIM
  BOM
  PERFEITO
}

enum Permissions {
  OBJECTS
  PLACES
  COMPANIES
  EPIS
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String
  loginHash     String?   @unique
  createdAt     DateTime  @default(now())
  deactivatedAt DateTime?
  deletedAt     DateTime?
  role          Role      @default(EMPLOYEE)
  firstAcess    Boolean?

  cleaning            Cleaning[]
  schedule            Schedule[]
  Avaliation          Avaliation[]
  userForCompany      userForCompany[]
  PermissionsForUsers PermissionsForUsers[]
}

model PermissionsForUsers {
  id         String      @id @default(uuid())
  userId     String
  Permission Permissions
  user       User        @relation(fields: [userId], references: [id])
}

model userForCompany {
  userId    String
  companyId String

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
}

model Company {
  id   String @id @default(uuid())
  name String

  Epis           Equipment[]
  Place          Place[]
  Object         Object[]
  userForCompany userForCompany[]
}

model Equipment {
  id        String    @id @default(uuid())
  name      String
  companyId String
  deleteAt  DateTime?

  company                Company                  @relation(fields: [companyId], references: [id])
  EquipmentsOfAvaliation EquipmentsOfAvaliation[]
}

model Avaliation {
  id                     String                   @id @default(uuid())
  managerId              String
  status                 StatusAvaliacao
  observation            String?
  User                   User                     @relation(fields: [managerId], references: [id])
  EquipmentsOfAvaliation EquipmentsOfAvaliation[]
  Cleaning               Cleaning[]
}

model EquipmentsOfAvaliation {
  avaliationid String
  equipamentId String

  avaliation Avaliation @relation(fields: [avaliationid], references: [id])
  equipament Equipment  @relation(fields: [equipamentId], references: [id])

  @@id([avaliationid, equipamentId])
}

model Place {
  id          String  @id @default(uuid())
  name        String
  description String?
  companyId   String

  company  Company    @relation(fields: [companyId], references: [id])
  Schedule Schedule[]
  Cleaning Cleaning[]
}

model Object {
  id        String @id @default(uuid())
  name      String
  companyId String

  company          Company            @relation(fields: [companyId], references: [id])
  ObjectOfCleaning ObjectOfCleaning[]
}

model Evidence {
  id          String       @id @default(uuid())
  cleaningId  String
  evidenceUrl String
  type        EvidenceType
  createdAt   DateTime     @default(now())

  cleaning Cleaning @relation(fields: [cleaningId], references: [id])
}

model ObjectOfCleaning {
  objectId   String
  cleaningId String

  object   Object   @relation(fields: [objectId], references: [id])
  cleaning Cleaning @relation(fields: [cleaningId], references: [id])

  @@id([objectId, cleaningId])
}

model Cleaning {
  id           String    @id @default(uuid())
  userId       String
  placeId      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  status       Status    @default(PENDENTE)
  avaliationId String?

  avaliation       Avaliation?        @relation(fields: [avaliationId], references: [id])
  evidences        Evidence[]
  User             User               @relation(fields: [userId], references: [id])
  Place            Place              @relation(fields: [placeId], references: [id])
  ObjectOfCleaning ObjectOfCleaning[]
}

model Schedule {
  id            String    @id @default(uuid())
  placeId       String
  userId        String
  eventDate     DateTime
  repeatable    Boolean
  deactivatedAt DateTime?

  place       Place @relation(fields: [placeId], references: [id])
  responsible User  @relation(fields: [userId], references: [id])
}
