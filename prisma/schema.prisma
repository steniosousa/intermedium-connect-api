// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EvidenceType {
  ENTRANCE
  EXIT
  OBSERVATION
}

model User {
  id            String    @id @default(uuid())
  name          String
  password      String
  loginHash     String    @unique
  createdAt     DateTime  @default(now())
  deactivatedAt DateTime?
  companyId     String?

  company  Company?   @relation(fields: [companyId], references: [id])
  cleaning Cleaning[]
  schedule Schedule[]
}

model Company {
  id      String    @id @default(uuid())
  name    String
  users   User[]
  Objects Objects[]
  Place   Place[]
}

model Place {
  id        String     @id @default(uuid())
  name      String
  companyId String
  company   Company    @relation(fields: [companyId], references: [id])
  Schedule  Schedule[]
  Cleaning  Cleaning[]
}

model Objects {
  id              String            @id @default(uuid())
  name            String
  companyId       String
  companys        Company           @relation(fields: [companyId], references: [id])
  ScheduleObject  ScheduleObject[]
  CleaningObjects CleaningObjects[]
}

model Evidence {
  id          String       @id @default(uuid())
  cleaningId  String
  evidenceUrl String
  type        EvidenceType
  createdAt   DateTime     @default(now())

  cleaning Cleaning @relation(fields: [cleaningId], references: [id])
}

model Cleaning {
  id        String    @id @default(uuid())
  userId    String
  placeId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  evidences       Evidence[]
  User            User              @relation(fields: [userId], references: [id])
  Place           Place             @relation(fields: [placeId], references: [id])
  CleaningObjects CleaningObjects[]
}

model CleaningObjects {
  cleaningId String
  objectId   String

  cleaning Cleaning @relation(fields: [cleaningId], references: [id])
  object   Objects  @relation(fields: [objectId], references: [id])

  @@id([cleaningId, objectId])
}

model ScheduleObject {
  scheduleId String
  objectId   String

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  object   Objects  @relation(fields: [objectId], references: [id])

  @@id([scheduleId, objectId])
}

model Schedule {
  id            String    @id @default(uuid())
  placeId       String
  responsibleId String
  eventDate     DateTime
  repeatable    Boolean
  deactivatedAt DateTime?

  place       Place            @relation(fields: [placeId], references: [id])
  responsible User             @relation(fields: [responsibleId], references: [id])
  objects     ScheduleObject[]
}
