// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @unique @default(uuid())
  name         String
  hashPassword String
  password     String     @default(uuid())
  loginHash    String     @unique
  active       Boolean    @default(true)
  createAt     DateTime   @default(now())
  disableAt    DateTime   @updatedAt
  company      Company?   @relation(fields: [companyId], references: [id])
  companyId    String?
  manager      Manager?   @relation(fields: [managerId], references: [id])
  managerId    String?
  Cleaning     Cleaning[]
  Cron         Cron[]
  Schedule     Schedule[]
}

model Cron {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Company {
  id       String    @id @default(uuid())
  name     String
  managers Manager[]
  users    User[]
  Objects  Objects[]
  Place    Place[]
}

model Manager {
  id           String  @id @default(uuid())
  name         String
  hashPassword String
  companyId    String
  users        User[]
  companys     Company @relation(fields: [companyId], references: [id])
}

model Place {
  id        String     @id @default(uuid())
  name      String
  companyId String
  company   Company    @relation(fields: [companyId], references: [id])
  Schedule  Schedule[]
  Cleaning  Cleaning[]
}

model Objects {
  id              String              @id @default(uuid())
  name            String
  companyId       String
  companys        Company             @relation(fields: [companyId], references: [id])
  cleanings       CleaningOfObjects[]
  ScheduleObject  ScheduleObject[]
  CleaningObjects CleaningObjects[]
}

model Cleaning {
  id       String   @id @default(uuid())
  userId   String
  createAt DateTime @default(now())
  status   String   @default("Pendente")
  updateAt DateTime @default(now())
  entrance String?
  exit     String?
  obs1     String?
  obs2     String?
  obs3     String?
  placeId  String

  user            User                @relation(fields: [userId], references: [id])
  place           Place               @relation(fields: [placeId], references: [id])
  objects         CleaningOfObjects[]
  CleaningObjects CleaningObjects[]
}

model CleaningObjects {
  cleaningId String
  objectId   String

  cleaning Cleaning @relation(fields: [cleaningId], references: [id])
  object   Objects  @relation(fields: [objectId], references: [id])

  @@id([cleaningId, objectId])
}

model CleaningOfObjects {
  id         String   @id @default(uuid())
  createAt   DateTime @default(now())
  cleaning   Cleaning @relation(fields: [cleaningId], references: [id])
  object     Objects  @relation(fields: [objectsId], references: [id])
  cleaningId String
  objectsId  String
}

model ScheduleObject {
  scheduleId String
  objectId   String

  schedule Schedule @relation(fields: [scheduleId], references: [id])
  object   Objects  @relation(fields: [objectId], references: [id])

  @@id([scheduleId, objectId])
}

model Schedule {
  id            String    @id @default(uuid())
  placeId       String
  responsibleId String
  eventDate     DateTime
  repeatable    Boolean
  deactivatedAt DateTime?

  place       Place            @relation(fields: [placeId], references: [id])
  responsible User             @relation(fields: [responsibleId], references: [id])
  objects     ScheduleObject[]
}
